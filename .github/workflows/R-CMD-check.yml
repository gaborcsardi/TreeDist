# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  schedule:
    - cron: "24 06 * * 1"
  push:
    branches:
      - main
      - master
    paths-ignore:
      - "Meta**"
      - "memcheck**"
      - "docs**"
      - "**.git"
      - "**.json"
      - "**.md"
      - "**.yml"
      - "!**R-CMD-check.yml"
      - "**.R[dD]ata"
      - "**.Rpro*"
  pull_request:
    branches:
      - main
      - master
    paths-ignore:
      - "Meta**"
      - "memcheck**"
      - "docs**"
      - "**.git"
      - "**.json"
      - "**.md"
      - "**.yml"
      - "!**R-CMD-check.yml"
      - "**.R[dD]ata"
      - "**.Rpro*"

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: '4.1', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      _R_CHECK_FORCE_SUGGESTS_: false
      R_COMPILE_AND_INSTALL_PACKAGES: 'never'
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = c('soft', 'Config/Needs/check', 'Config/Needs/codecov')), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install texlive texlive-fonts-extra
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libgit2 basictex
          sudo tlmgr update --self
          sudo tlmgr update --all
          sudo tlmgr install titling framed inconsolata
          sudo tlmgr install collection-fontsrecommended
          eval "$(/usr/libexec/path_helper)"

      - name: Install covr (Windows)
        if: runner.os == 'Windows'
        run: |
          remotes::install_deps(dependencies = 'Config/Needs/codecov')
        shell: Rscript {0}
        
      - name: Cache TeX Live
        if: runner.os == 'Windows'
        id: cache-texlive
        uses: actions/cache@v1
        with:
          path: D:\texlive
          key: ${{ env.cache-version }}-${{ runner.os }}-texlive
          restore-keys: |
            ${{ env.cache-version }}-${{ runner.os }}-texlive
            
      - name: Download install-tl.zip
        run: |
          curl -O -L http://mirror.ctan.org/systems/texlive/tlnet/install-tl.zip
          unzip -q install-tl.zip
          mv install-tl-2* install-tl-dir
        if: |
          steps.cache-texlive.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        
      - name: Run install-tl-windows.bat
        if: |
          steps.cache-texlive.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        run: |
          install-tl-dir\install-tl-windows.bat --profile texlive.profile
        shell: cmd
        
      - name: Run tlmgr install
        if: |
          steps.cache-texlive.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        run: |
          tlmgr update --self
          tlmgr install latex-bin platex uplatex tex xetex
          tlmgr install amsmath graphics tools latexmk
          ls -l D:\texlive\bin\win32

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = c('soft', 'Config/Needs/check'))
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"),
            error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: runner.os == 'Windows'
        run: covr::codecov()
        shell: Rscript {0}
